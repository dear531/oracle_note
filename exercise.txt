SQL> select * from t22;

G2_ID      G2_NAME    MEMBER          SCORE     SCORE2 TMP
---------- ---------- ---------- ---------- ---------- -----
00         A          0001               60
00         A          0002               59
00         A          0003               61
01         B          0101               80
01         B          0102               90
02         C          0201              100
01         B          0103               61
03         D

8 rows selected.


1.＋＋列出至少有一个员工的所有部门：
SQL> select g2_name
  2  from t22
  3  group by g2_name
  4  having count(member) > 0
  5* order by g2_name

G2_NAME
----------
A
B
C

++order by中排序的列，必须是group by分组的关键词或之一。
++而且必须是分组之后再排序

++另外一种方案：
++将所有员工不空的部门显示出来，并且去重，理解起来比较简单：
SQL> select distinct g2_name
  2  from t22
  3  where member is not null;

G2_NAME
----------
A
B
C

2.++列出成绩比0001高的所有记录：
++利用查询子句完成
SQL> r
  1  select * from t22
  2  where score > (
  3     select score from t22 where member = '0001'
  4* )

G2_ID      G2_NAME    MEMBER          SCORE     SCORE2 TMP
---------- ---------- ---------- ---------- ---------- -----
00         A          0003               61
01         B          0101               80
01         B          0102               90
02         C          0201              100
01         B          0103               61

++可以将0001的score等于60，换成0003的成绩等于61
SQL> 3  
  3*    select score from t22 where member = '0001'
SQL> c /0001/0003
  3*    select score from t22 where member = '0003'
SQL> r
  1  select * from t22
  2  where score > (
  3     select score from t22 where member = '0003'
  4* )

G2_ID      G2_NAME    MEMBER          SCORE     SCORE2 TMP
---------- ---------- ---------- ---------- ---------- -----
01         B          0101               80
01         B          0102               90
02         C          0201              100

3.++显示成员所在的组的全部信息：
SQL> r
  1  select g1_id, g1_name, t2.g2_id, t2.g2_name, member, score, score2
  2  from t1, t2
  3* where t1.g2_id = t2.g2_id

G1_ID G1_NAME    G2_ID      G2_NAME    MEMBER          SCORE     SCORE2
----- ---------- ---------- ---------- ---------- ---------- ----------
0     a          00         A          0001               60
0     a          00         A          0002               59
0     a          00         A          0003               61
1+    b+         01         B          0101               80
1     b          01         B          0101               80
1+    b+         01         B          0102               90
1     b          01         B          0102               90
1+    b+         01         B          0103               61
1     b          01         B          0103               61

9 rows selected.

SQL> r
  1  select g1_id, g1_name, g2_id, t2.g2_name, member, score, score2
  2  from t1
  3  join t2
  4* using(g2_id)

G1_ID G1_NAME    G2_ID      G2_NAME    MEMBER          SCORE     SCORE2
----- ---------- ---------- ---------- ---------- ---------- ----------
0     a          00         A          0001               60
0     a          00         A          0002               59
0     a          00         A          0003               61
1+    b+         01         B          0101               80
1     b          01         B          0101               80
1+    b+         01         B          0102               90
1     b          01         B          0102               90
1+    b+         01         B          0103               61
1     b          01         B          0103               61

9 rows selected.

++注意用oracle的连接方法和sql标准语句的区别
＋＋标准sql中using中引用的列在select显示列中可以不标注表明，因为using就标志这两个表连接的这一列是相同的，彼此一样
＋＋而oracle的连接函数则不能省略表名，因为oracle连接用的where语句比较两列，两列的名称可以相同，也可以不同，显示的列无法辨别是相同的

=================================
++老师及学生成绩数据分析：
++执行sql脚本：exercise_sql_01.sql
++1、查询“c001”课程比“c002”课程成绩高的所有学生的学号；
++自己想到的做法：
SQL> r
  1  select a.sno, a.score c001_score,  b.score c002_score
  2  from sc a, sc b
  3* where a.sno = b.sno and a.cno = 'c001' and b.cno = 'c002' and a.score >
b.score

SNO                  C001_SCORE C002_SCORE
-------------------- ---------- ----------
s002                       80.9       72.9

++参考答案给的做法两种：
++第一种：
++先为两种成绩准备好两个表，然后再进行对比
SQL> r
  1  select a.sno, a.score c001_score,  b.score c002_score
  2  from (select * from sc where cno = 'c001') a
  3  , (select * from sc where cno = 'c002') b
  4* where a.sno = b.sno and a.score > b.score

SNO                  C001_SCORE C002_SCORE
-------------------- ---------- ----------
s002                       80.9       72.9
++第二种：
++按成绩1查找到出记录，再按成绩2查找该表，并配合是否是该人成绩和成绩2是否大于成绩1，如果存在则返回where条件的真值
＋＋则查询语句会输出
SQL> select * from sc a where a.cno = 'c001'
  2  and exists(select * from sc b where a.sno = b.sno and b.cno = 'c002' and a.score > b.score);

SNO                  CNO                                 SCORE
-------------------- ------------------------------ ----------
s002                 c001                                 80.9

++2、查询平均成绩大于60 分的同学的学号和平均成绩；
++没啥太多需要解释的，分组函数查平均成绩，并且对分组函数加条件，所以用having
SQL> select sno, avg(score) from sc       
  2  group by sno 
  3  having  avg(score) > 60;

SNO                  AVG(SCORE)
-------------------- ----------
s001                      70.95
s002                       76.9
s003                       81.9
s004                       60.9

++3、查询所有同学的学号、姓名、选课数、总成绩；
++自我实现方法：
SQL> r
  1  select a.sno, sname, count, sum
  2  from student a
  3  , (select sno, count(cno) count, sum(score) sum from sc group by sno) b
  4* where a.sno = b.sno

SNO                  SNAME                     COUNT        SUM
-------------------- -------------------- ---------- ----------
s001                 张三                          2      141.9
s002                 李四                          2      153.8
s003                 吴鹏                          2      163.8
s004                 琴沁                          1       60.9

＋＋参考答案实现方法：
SQL> select a.*,s.sname from (select sno,sum(score),count(cno) from sc group
by sno) a ,student s where a.sno=s.sno;

SNO                  SUM(SCORE) COUNT(CNO) SNAME
-------------------- ---------- ---------- --------------------
s001                      141.9          2 张三
s002                      153.8          2 李四
s003                      163.8          2 吴鹏
s004                       60.9          1 琴沁

++4、查询姓“刘”的老师的个数；
++自我实现方法：
SQL> select count(tname) from teacher where tname like '刘%';

COUNT(TNAME)
------------
           1

++5、查询没学过“谌燕”老师课的同学的学号、姓名；
++先查到学过'谌燕'课程的学生，再从学生的总表里去掉学过的列表
SQL> r
  1  select sno, sname from student where sno not in (
  2     select sno from sc where cno in (
  3             select cno from course where tno in (
  4                     select tno from teacher where tname = '谌燕'
  5             )
  6     )
  7* )

SNO             SNAME
--------------- --------------------
s008            萧蓉
s007            刘玉
s006            李波
s005            王丽
s009            陈萧晓
s004            琴沁
s010            陈美

7 rows selected.

++通过子句联合查询得到的结果：
SQL> r  
  1  select * from student where sno not in (
  2     select c.sno from sc c, (
  3             select a.cno from course a,(
  4                     select tno from teacher where tname = '谌燕'
  5             ) b where a.tno = b.tno
  6     ) d where c.cno = d.cno
  7* )

SNO             SNAME                      SAGE SSEX
--------------- -------------------- ---------- ---------------
s008            萧蓉                         21 女
s007            刘玉                         21 男
s006            李波                         21 男
s005            王丽                         20 女
s009            陈萧晓                       23 女
s004            琴沁                         20 女
s010            陈美                         22 女

7 rows selected.

++用多表联合语句查询到学习'谌燕'老师课的所有学生的单列记录
＋＋然后再学生表将查询到的记录去除，即得到结果
SQL> r
  1  select * from student where sno not in (
  2     select c.sno
  3     from teacher a, course b, sc c
  4     where a.tname = '谌燕' and b.tno = a.tno and c.cno = b.cno
  5* )

SNO             SNAME                      SAGE SSEX
--------------- -------------------- ---------- ---------------
s008            萧蓉                         21 女
s007            刘玉                         21 男
s006            李波                         21 男
s005            王丽                         20 女
s009            陈萧晓                       23 女
s004            琴沁                         20 女
s010            陈美                         22 女

7 rows selected.

++6、查询学过“c001”并且也学过编号“c002”课程的同学的学号、姓名；
++先将成绩表内联，找到本表中两个学科都有的学生记录的学号
＋＋再根据学号匹配学号记录表
SQL> r
  1  select * from student
  2  where sno in (select a.sno from (
  3     select sno from sc where cno = 'c001') a,
  4     (select sno from sc where cno = 'c002') b
  5* where a.sno = b.sno)

SNO        SNAME            SAGE SSEX
---------- ---------- ---------- ----------
s002       李四               23 男
s003       吴鹏               25 男

++直接联合语句实现：
SQL> select * from student 
  2  where sno in (select a.sno from sc a, sc b
  3     where a.sno = b.sno and a.cno = 'c001' and b.cno = 'c002'
  4     );

SNO        SNAME            SAGE SSEX
---------- ---------- ---------- ----------
s002       李四               23 男
s003       吴鹏               25 男

++7、查询学过“谌燕”老师所教的所有课的同学的学号、姓名；
SQL> r
  1  select a.sno, a.sname
  2  from student a, sc b, course c, teacher d
  3  where d.tname = '谌燕'
  4  and d.tno = c.tno
  5  and c.cno = b.cno
  6* and b.sno = a.sno

SNO        SNAME
---------- ----------
s001       张三
s002       李四
s003       吴鹏

++8、查询课程编号“c002”的成绩比课程编号“c001”课程低的所有同学的学号、姓名；
++多表直接联合，分表找c002和c001的记录，在成绩表中，找到再对比成绩，是c002小于c001的记录，再联合学生信息表，并匹配学号和姓名
SQL> r
  1  select distinct a.sno, a.sname
  2  from student a
  3  , sc b, sc c
  4* where b.cno = 'c002' and c.cno = 'c001' and b.score < c.score and b.sno =
a.sno

SNO        SNAME
---------- ----------
s002       李四

++9、查询所有课程成绩小于60 分的同学的学号、姓名；
++注意去重的结果是所有记录都相同才能去重，否则无法去重
SQL> r
  1  select distinct a.sno, a.sname, b.score
  2  from student a, sc b
  3* where b.score < 60 and b.sno = a.sno

SNO        SNAME           SCORE
---------- ---------- ----------
s001       张三               59
s001       张三               58

SQL> 1 select distinct a.sno, a.sname
SQL> r
  1  select distinct a.sno, a.sname
  2  from student a, sc b
  3* where b.score < 60 and b.sno = a.sno

SNO        SNAME
---------- ----------
s001       张三

++10、查询没有学全所有课的同学的学号、姓名；
++想得到所有学生成绩，必须对学生表做左联取得学生表代学科的总表，并按学号分组之后对学科做个数统计，统计之前去重；再将得到学科数量和教师授课表的去重的学科总数做比较，小于教师学科教课总数就输出学号和姓名：
SQL> r
  1  select a.sno, a.sname, count(distinct b.cno)
  2  from student a
  3  left join sc b
  4  on a.sno = b.sno
  5  group by a.sno, a.sname
  6  having count(distinct b.cno) < (
  7* select count(distinct cno) from course)

SNO        SNAME      COUNT(DISTINCTB.CNO)
---------- ---------- --------------------
s003       吴鹏                          2
s008       萧蓉                          0
s002       李四                          2
s007       刘玉                          0
s009       陈萧晓                        0
s001       张三                          3
s005       王丽                          0
s004       琴沁                          1
s010       陈美                          0
s006       李波                          0

10 rows selected.

++11、查询至少有一门课与学号为“s001”的同学所学相同的同学的学号和姓名；
++先将成绩表内联，找到与s001相同的其他成员，内联其他学生时，一定要将自己s001去掉，得到学生列表之后，再连接学生信息表，连接学号和姓名信息：
SQL> r  
  1  select distinct b.sno, c.sname
  2  from sc a, sc b, student c
  3* where a.sno = 's001' and b.sno != 's001' and a.cno = b.cno and b.sno = c.sno

SNO        SNAME
---------- ----------
s003       吴鹏
s002       李四

++13、把“SC”表中“谌燕”老师教的课的成绩都更改为此课程的平均成绩；

++心得结果：
++先得到通过老师查询学生成绩的平均值结果，再update 表格名 set 字段 ＝ (得到平均值的查询子句) where 条件进行更新：
++查询平均值结果：
SQL> r  
  1  select c.cno, avg(score)
  2  from teacher a, course b, sc c
  3  where a.tname = '谌燕' and a.tno = b.tno
  4     and b.cno = c.cno
  5* group by c.cno

CNO        AVG(SCORE)
---------- ----------
c002       79.2333333

++直接得到的结果去更新成绩表，会的到没有满足条件的列被更新为空的情况：
SQL> select * from sc;

SNO        CNO             SCORE
---------- ---------- ----------
s002       c001
s003       c001
s004       c001
s001       c002            79.23
s002       c002            79.23
s003       c002            79.23
s001       c003
s001       c004

8 rows selected.

++所以最直观的方法是，如果为空的结果，则用nvl函数更新成原来的值，结果这样做的过程可想而知，所有数据都更新了一遍，可以想象，耗时，还会引起字段被更新一遍而引起的字段被更新的数据库关联问题：
SQL> r  
  1  update sc set score = nvl((
  2     select avg(score) avg
  3     from teacher a, course b, sc c
  4     where a.tname = '谌燕' and a.tno = b.tno
  5             and b.cno = c.cno and sc.cno = c.cno
  6     group by c.cno
  7* ), sc.score)

8 rows updated.
++结果随正确，但却有问题
SQL> select * from sc;

SNO        CNO             SCORE
---------- ---------- ----------
s002       c001             80.9
s003       c001             81.9
s004       c001             60.9
s001       c002            79.23
s002       c002            79.23
s003       c002            79.23
s001       c003               59
s001       c004               58

8 rows selected.

++所以我们有必要找更合适的方法：
＋＋方法1：用where exists函数，检查查询子句是否有值，有值则更新：

SQL> r  
  1  update sc set score = (
  2     select avg(score) avg
  3     from teacher a, course b, sc c
  4     where a.tname = '谌燕' and a.tno = b.tno
  5             and b.cno = c.cno and sc.cno = c.cno
  6     group by c.cno
  7  ) where exists(
  8  select avg(score) avg
  9     from teacher a, course b, sc c
 10     where a.tname = '谌燕' and a.tno = b.tno
 11             and b.cno = c.cno and sc.cno = c.cno
 12     group by c.cno
 13* )

3 rows updated.

SQL> select * from sc;

SNO        CNO             SCORE
---------- ---------- ----------
s002       c001             80.9
s003       c001             81.9
s004       c001             60.9
s001       c002            79.23
s002       c002            79.23
s003       c002            79.23
s001       c003               59
s001       c004               58

8 rows selected.

++我们可以看到，c002的三行已经被全部更新了。

＋＋方法2：
++通过同样的方法统计出平均值，作为需要更记录的成绩新值
＋＋再通过查询老师对应的科目和学生学号，作为更新成绩表学号和学科两列的多列查询条件
＋＋更新sc成绩表时将上述两条子句按所说条件组合即可：
SQL> r  
  1  update sc set score = (
  2     select avg(score) avg
  3     from teacher a, course b, sc c
  4     where a.tname = '谌燕' and a.tno = b.tno
  5             and b.cno = c.cno and sc.cno = c.cno
  6     group by c.cno
  7  ) where (sc.sno, sc.cno) in (
  8     select c.sno, c.cno
  9     from teacher a, course b, sc c
 10     where a.tname = '谌燕' and a.tno = b.tno
 11             and b.cno = c.cno and sc.cno = c.cno
 12* )

3 rows updated.

SQL> select * from sc;

SNO        CNO             SCORE
---------- ---------- ----------
s002       c001             80.9
s003       c001             81.9
s004       c001             60.9
s001       c002            79.23
s002       c002            79.23
s003       c002            79.23
s001       c003               59
s001       c004               58

8 rows selected.

++14、查询和“s001”号的同学学习的课程完全相同的其他同学学号和姓名；
++利用以下学生信息表：
SQL> select * from sc;

SNO        CNO             SCORE
---------- ---------- ----------
s002       c003             80.9
s003       c001             81.9
s004       c001             60.9
s001       c002             82.9
s002       c002             72.9
s003       c002             81.9
s001       c003               59


++必须用存储过程完成这个实例了：
＋＋先获得课程完全相同的学号
＋＋再加上显示学号和姓名
SET SERVEROUTPUT ON 
declare
  cursor c_job is
        select distinct sno from sc where sno != 's001';
  c_row c_job%rowtype;
        counter integer := 0;
        sno character(20) := '0';
        sname character(20) := '0';
begin
  for c_row in c_job loop
	/* a-b and b-a = 0 则表示两集合完全相同，包括空集 */
        select count(*) into counter from ((
                select cno from sc where sno = 's001'
                minus
                select cno from sc where sno = c_row.sno
        ) union (
                select cno from sc where sno = c_row.sno
                minus
                select cno from sc where sno = 's001'
        ));
	/* 当两集合相同时，找到与s001对比的该同学信息 */
        if counter = 0 then
        select sname, sno into sname, sno from student where sno = c_row.sno;
                dbms_output.put_line('sno:'||sno||',sname:'||sname);
        end if;
  end loop;
end; 
/

++将上述内容存成脚本，执行即可得到结果：

SQL> @tmp
sno:s002                ,sname:李四

PL/SQL procedure successfully completed.

++15、删除学习“谌燕”老师课的SC 表记录；
++联合教师信息表，课程表，找到教师所授课程
＋＋再在学生成绩表中根据找到的教师课程删除所有该课程的记录，即该教师所有所教课程的所有记录。
＋＋未删除之前：
SQL> select * from sc;

SNO        CNO             SCORE
---------- ---------- ----------
s002       c003             80.9
s003       c001             81.9
s004       c001             60.9
s001       c002             82.9
s002       c002             72.9
s003       c002             81.9
s001       c003               59

7 rows selected.

++根据教师信息表和课程表找到的教师课程：
SQL> r
  1  select cno
  2  from teacher a, course b
  3  where a.tno = b.tno
  4* and a.tname = '谌燕'

CNO
----------
c002
c007
c010

++根据找到的课程删除学生成绩表：
SQL> r
  1  delete sc where cno in (
  2     select cno
  3     from teacher a, course b
  4     where a.tno = b.tno and a.tname = '谌燕'
  5* )

3 rows deleted.

＋＋删除结果：
SQL> select * from sc;

SNO        CNO             SCORE
---------- ---------- ----------
s002       c003             80.9
s003       c001             81.9
s004       c001             60.9
s001       c003               59


++16、向SC 表中插入一些记录，这些记录要求符合以下条件：没有上过编号“c002”课程的同学学号、“c002”号课的平均成绩；
++用成绩表以不等于c002的学科为条件查到所有学号
＋＋再次用成绩表以等于c002为条件，得到成绩的平均值
＋＋联合以上两张表，获得第一列为学号，第二列为平均成绩的表格
＋＋以获得到的联合表格为新值，插入到sc学生成绩的sno和score两列中
SQL> get tmp4
  1  insert into sc
  2  (sno, score)
  3  select sno, score from (
  4     select avg(score) score
  5     from sc
  6     where cno = 'c002'
  7  ), (
  8     select distinct sno
  9     from sc
 10     where cno != 'c002'
 11* )
 12  /

4 rows created.

SQL> select * from sc;

SNO        CNO             SCORE
---------- ---------- ----------
s002       c001             80.9
s003       c001             81.9
s004       c001             60.9
s001       c002             82.9
s002       c002             72.9
s003       c002             81.9
s001       c003               59
s001       c004               58
s001                       79.23
s002                       79.23
s003                       79.23

SNO        CNO             SCORE
---------- ---------- ----------
s004                       79.23

12 rows selected.

++要插入的新值的列名和要插入表的列名可以相同，也可以不同
SQL> r
  1  insert into sc
  2  (sno, score)
  3  select sno, avg from (
  4     select avg(score) avg
  5     from sc
  6     where cno = 'c002'
  7  ), (
  8     select distinct sno
  9     from sc
 10     where cno != 'c002'
 11* )

4 rows created.

++17、查询各科成绩最高和最低的分：以如下形式显示：课程ID，最高分，最低分
++比较常规，根据各科成绩进行分组
SQL> select cno, min(score), max(score)
  2  from sc
  3  group by cno;

CNO        MIN(SCORE) MAX(SCORE)
---------- ---------- ----------
c002             72.9       82.9
c001             60.9       81.9
c004               58         58
c003               59         59

++18、按各科平均成绩从低到高和及格率的百分数从高到低顺序
++获得百分比的方法需要特殊处理，利用case语句对成绩大于或等于60的成绩做计数统计，成绩及格则计1，否则计0，然后再求和，之后除以总数量，即得到及格率。
＋＋最后再排序：
SQL> get tmp
  1  select cno, avg(score) avg, sum(case when score >= 60 then 1 else 0 end)
/ count(score) * 100 "及格率"
  2  from sc
  3  group by cno
  4* order by avg, "及格率" desc
  5  /

CNO               AVG     及格率
---------- ---------- ----------
c004               58          0
c003               59          0
c001       74.5666667        100
c002       79.2333333        100

++19、查询不同老师所教不同课程平均分从高到低显示
++先联合教师表，课程表以及成绩表
＋＋再对生成的表对教师和科目两列进行分组求成绩平均值
＋＋最后加排序
SQL> r
  1  select a.tname, b.cno, avg(c.score)
  2  from teacher a, course b, sc c
  3  where a.tno = b.tno and b.cno = c.cno
  4  group by a.tname, b.cno
  5* order by AVG(C.SCORE) desc

TNAME      CNO        AVG(C.SCORE)
---------- ---------- ------------
谌燕       c002         79.2333333
谌燕       c001         74.5666667
刘阳       c003                 59
刘阳       c004                 58

++20、统计列印各科成绩,各分数段人数:课程ID,课程名称,[100-85],[85-70],[70-60],[
<60]
++先联合课程表和成绩表，再利用case语句对成绩做分段有效计数，再分段内计1，不在计0
＋＋最后分列统计总数，得到统计表
SQL> r
  1  select a.cno, a.cname,
  2  sum(case when b.score >= 85 and b.score <= 100 then 1 else 0 end)
"[85,100]",
  3  sum(case when b.score >= 70 and b.score < 85 then 1 else 0 end)
"[70,85)",
  4  sum(case when b.score >= 60 and b.score < 70 then 1 else 0 end)
"[60,70)",
  5  sum(case when b.score < 60 then 1 else 0 end) "[<60]"
  6  from course a, sc b
  7  where a.cno = b.cno
  8* group by a.cno, a.cname

CNO        CNAME             [85,100]    [70,85)    [60,70)      [<60]
---------- --------------- ---------- ---------- ---------- ----------
c002       Java Web                 0          3          0          0
c004       Oracle                   0          0          0          1
c003       SSH                      0          0          0          1
c001       J2SE                     0          2          1          0

++21、查询各科成绩前三名的记录:(不考虑成绩并列情况)
＋＋利用分类聚合函数over(partition by columnA order by columnB)
++本函数的意思是根据列A进行分类汇总，根据列B进行排序
++row_number()是对得到结果进行标号，之后重命名为rn列
++最后将得到的结果当作子句表，外层对子句表进行条件限定，显示rn < 4的结果
SQL> get tmp
  1  select * from (
  2     select sno, cno, score,
  3     row_number() over(partition by cno order by score desc) rn
  4     from sc
  5  )
  6* where rn < 4
  7  /

SNO        CNO             SCORE         RN
---------- ---------- ---------- ----------
s003       c001             81.9          1
s002       c001             80.9          2
s004       c001             60.9          3
s001       c002             82.9          1
s003       c002             81.9          2
s002       c002             72.9          3
s001       c003               59          1
s001       c004               58          1

8 rows selected.

++几种分类聚合函数：
＋＋以下以下列表格作为原型：
SQL> select * from sc;

SNO        CNO             SCORE
---------- ---------- ----------
s002       c001             80.9
s003       c001             81.9
s004       c001             60.9
s001       c002             82.9
s002       c002             72.9
s003       c002             81.9
s001       c003               59
s001       c004               58
s005       c001             81.9

9 rows selected.

＋＋rank考虑并列情况，有并列下一个名次为前边排名留出来名词计数：
SQL> get tmp
  1     select sno, cno, score,
  2     rank() over(partition by cno order by score desc) rn
  3*    from sc
  4  /

SNO        CNO             SCORE         RN
---------- ---------- ---------- ----------
s003       c001             81.9          1
s005       c001             81.9          1
s002       c001             80.9          3
s004       c001             60.9          4
s001       c002             82.9          1
s003       c002             81.9          2
s002       c002             72.9          3
s001       c003               59          1
s001       c004               58          1

9 rows selected.

＋＋c001的排名，因有两个并列第一，第三个人只能是第三名

++dense_rank函数：
＋＋不计并列，并且只记分数排名，并且以显示并列排名
SQL> get tmp
  1     select sno, cno, score,
  2     dense_rank() over(partition by cno order by score desc) rn
  3*    from sc
  4  /

SNO        CNO             SCORE         RN
---------- ---------- ---------- ----------
s003       c001             81.9          1
s005       c001             81.9          1
s002       c001             80.9          2
s004       c001             60.9          3
s001       c002             82.9          1
s003       c002             81.9          2
s002       c002             72.9          3
s001       c003               59          1
s001       c004               58          1

9 rows selected.

++row_number函数，正常排序，重复的也正常加一计数：
SQL> get tmp
  1     select sno, cno, score,
  2     row_number() over(partition by cno order by score desc) rn
  3*    from sc
  4  /

SNO        CNO             SCORE         RN
---------- ---------- ---------- ----------
s003       c001             81.9          1
s005       c001             81.9          2
s002       c001             80.9          3
s004       c001             60.9          4
s001       c002             82.9          1
s003       c002             81.9          2
s002       c002             72.9          3
s001       c003               59          1
s001       c004               58          1

9 rows selected.

++lag将前几个值改变成其他的值：
++分类汇总，将前两个值改成99
SQL> get tmp
  1     select sno, cno, score,
  2     lag(score, 2, 99) over(partition by cno order by score desc) rn
  3*    from sc
  4  /

SNO        CNO             SCORE         RN
---------- ---------- ---------- ----------
s003       c001             81.9         99
s005       c001             81.9         99
s002       c001             80.9       81.9
s004       c001             60.9       81.9
s001       c002             82.9         99
s003       c002             81.9         99
s002       c002             72.9       82.9
s001       c003               59         99
s001       c004               58         99

9 rows selected.

++23、查询出只选修了一门课程的全部学生的学号和姓名
SQL>1 select sno, sname
SQL> r
  1  select sno, sname
  2  from student
  3  where sno in (
  4     select sno
  5     from sc
  6     group by sno
  7     having count(cno) = 1
  8* )

SNO        SNAME
---------- ----------
s004       琴沁
s005       王丽

++24、查询男生、女生人数
SQL> r
  1  select count(*) 人数, ssex
  2  from student
  3* group by ssex

      人数 SSEX
---------- ----------
         5 男
         5 女

++25、查询姓“张”的学生名单
SQL> r
  1  select * from student
  2* where sname like '张%'

SNO        SNAME            SAGE SSEX
---------- ---------- ---------- ----------
s001       张三               23 男

++26、查询同名同性学生名单，并统计同名人数
++按学号和名字分组计数，大于一行的是有重名的
＋＋即学号不同，但名字相同，按相同名字处理

SQL> r
  1  select sno, sname, count(*) count
  2  from student
  3  group by sno, sname
  4* having count(*) > 1

no rows selected


