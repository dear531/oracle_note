1.
oracle企业管理器启动：
[oracle@ctos oracle]$ emctl start dbconsole
Oracle Enterprise Manager 11g Database Control Release 11.2.0.1.0 
Copyright (c) 1996, 2009 Oracle Corporation.  All rights reserved.
https://ctos:1158/em/console/aboutApplication
 - An instance of Oracle Enterprise Manager 11g Database Control is already running. 
企业管理器登录地址：
https://192.168.118.128:1158/em/
别忘了设置或关闭防火墙，要不然访问的地址是不允许访问的
2.
oracle配置助手：
$ netca
====================
＋＋关闭数据库：
SQL> shutdown immediate
Database closed.
Database dismounted.
ORACLE instance shut down.
＋＋startup nomount
startup
nomount选项启动实例，但不安装数据库。当数据库以这个模式启动时，参数文件被读取；后台进程和内存结构被启动；但它们不被附加或与数据库的磁盘结构进行通信。当实例处于这个状态时，数据库是不可使用的。
SQL> startup nomount;
ORACLE instance started.

Total System Global Area  839282688 bytes
Fixed Size                  2217992 bytes
Variable Size             591398904 bytes
Database Buffers          239075328 bytes
Redo Buffers                6590464 bytes

＋＋当我们用命令查询数据表时，发现不能操作：
SQL> select * from student;
select * from student
              *
ERROR at line 1:
ORA-01219: database not open: queries allowed on fixed tables/views only


＋＋我们重新关闭并用默认的加载数据库方式进行启动，发现多了加载和打开数据库两个操作
SQL> shutdown immediate;
ORA-01507: database not mounted


ORACLE instance shut down.
SQL> startup 
ORACLE instance started.

Total System Global Area  839282688 bytes
Fixed Size                  2217992 bytes
Variable Size             591398904 bytes
Database Buffers          239075328 bytes
Redo Buffers                6590464 bytes
Database mounted.
Database opened.
++这时我们再查询操作，发现数据库是可以进行操作的：
SQL> select * from student;

SNO        SNAME            SAGE SSEX
---------- ---------- ---------- ----------
s001       张三               23 男
s002       李四               23 男
s003       吴鹏               25 男
s004       琴沁               20 女
s005       王丽               20 女
s006       李波               21 男
s007       刘玉               21 男
s008       萧蓉               21 女
s009       陈萧晓             23 女
s010       陈美               22 女

10 rows selected.

++当然如果数据库格式显示有问题，则要对字段宽度显示作个设置。

++startup mount
＋＋停止数据库时有关闭和卸载过程，这是因为打开时作了加载和打开操作：
++startup mount命令启动数据库实例，加载数据库，但不打开数据库：
SQL> shutdown immediate
Database closed.
Database dismounted.
ORACLE instance shut down.
SQL> startup mount
ORACLE instance started.

Total System Global Area  839282688 bytes
Fixed Size                  2217992 bytes
Variable Size             603981816 bytes
Database Buffers          226492416 bytes
Redo Buffers                6590464 bytes
Database mounted.
SQL> 

++startup mount启动的命令执行关闭样貌
SQL> shutdown immediate
ORA-01109: database not open


Database dismounted.
ORACLE instance shut down.

++startup [open]
SQL> startup open
ORACLE instance started.

Total System Global Area  839282688 bytes
Fixed Size                  2217992 bytes
Variable Size             603981816 bytes
Database Buffers          226492416 bytes
Redo Buffers                6590464 bytes
Database mounted.
Database opened.
SQL> shutdown immediate
Database closed.
Database dismounted.
ORACLE instance shut down.
++或如下这样执行：
SQL> startup
ORACLE instance started.

Total System Global Area  839282688 bytes
Fixed Size                  2217992 bytes
Variable Size             603981816 bytes
Database Buffers          226492416 bytes
Redo Buffers                6590464 bytes
Database mounted.
Database opened.
＋＋startup 执行关闭样貌
SQL> shutdown immediate
Database closed.
Database dismounted.
lORACLE instance shut down.
============
SQL>startup force
++startup force强制启动，在其他启动选项都不可用的情况下
ORACLE instance started.

Total System Global Area  839282688 bytes
Fixed Size                  2217992 bytes
Variable Size             603981816 bytes
Database Buffers          226492416 bytes
Redo Buffers                6590464 bytes
Database mounted.
Database opened.

======================
＋＋关闭数据库实例：
++shutdown normal
++禁止新连接，等当前用户主动断开连接，然后关闭数据库
SQL> shutdown normal
Database closed.
Database dismounted.
ORACLE instance shut down.

++shutdown transactional
++保持现有事物能进行提交，阻止新连接和阻止新事物，当所有用户都进行完事物提交后，断开用户连接，然后关闭数据库
SQL> shutdown transactional
Database closed.
Database dismounted.
ORACLE instance shut down.

++shutdown immediate
++将用户的事物回退，并关闭连接，关闭数据库
SQL> shutdown immediate
Database closed.
Database dismounted.
ORACLE instance shut down.

++shutdown abort
＋＋阻止新用户建立连接和阻止新事物，取消提交的事物，但不回滚，断开用户连接，关闭数据库 
SQL> shutdown abort 
ORACLE instance shut down.

=================
++oracle标准块大小查看：
SQL> column name format a30
SQL> column value format a20
SQL> r  
  1  select name, value
  2  from v$parameter
  3* where name = 'db_block_size'

NAME                           VALUE
------------------------------ --------------------
db_block_size                  8192
===================
＋＋查询数据库字典信息：
SQL> column table_name format a30
SQL> column comments format a30
SQL> select * from dict;
/* 结果只展示最后几行 */
TABLE_NAME                     COMMENTS
------------------------------ ------------------------------
V$MVREFRESH                    Synonym for V_$MVREFRESH
V$SQL_BIND_CAPTURE             Synonym for V_$SQL_BIND_CAPTUR
                               E

GV$SQL_BIND_CAPTURE            Synonym for GV_$SQL_BIND_CAPTU
                               RE

ALL_OLAP2_AWS                  Synonym for ALL$OLAP2_AWS

2553 rows selected.

===================
++查询数据库内部系统表信息：
SQL> column view_name format a30
SQL> column view_difinition format a30
SQL> select * from v$fixed_view_definition;
/* 结果只展示最后几行 */
VIEW_NAME                      VIEW_DEFINITION
------------------------------ ------------------------------
                               sabled_knlasg  FROM x$knlasg

V$STREAMS_POOL_STATISTICS      SELECT TOTAL_MEMORY_ALLOCATED,
                                CURRENT_SIZE, SGA_TARGET_VALU
                               E,         SHRINK_PHASE, ADVIC
                               E_DISABLED  FROM   GV$STREAMS_
                               POOL_STATISTICS WHERE  INST_ID
                                = USERENV('Instance')


1023 rows selected.

===================
++查询oracle系统文件信息：
SQL> select file_name, tablespace_name       
  2  from dba_data_files;

FILE_NAME
--------------------------------------------------
TABLESPACE_NAME
------------------------------------------------------------------------------------------
/home/oracle/app/oradata/orcl/users01.dbf
USERS

/home/oracle/app/oradata/orcl/undotbs01.dbf
UNDOTBS1

/home/oracle/app/oradata/orcl/sysaux01.dbf
SYSAUX


FILE_NAME
--------------------------------------------------
TABLESPACE_NAME
------------------------------------------------------------------------------------------
/home/oracle/app/oradata/orcl/system01.dbf
SYSTEM

=======================
++系统表查询：
SQL> select * from dba_data_files;

FILE_NAME                                             FILE_ID
-------------------------------------------------- ----------
TABLESPACE_NAME
------------------------------------------------------------------------------------------
     BYTES     BLOCKS STATUS                      RELATIVE_FNO AUTOEXTEN
MAXBYTES  MAXBLOCKS
---------- ---------- --------------------------- ------------ ---------
---------- ----------
INCREMENT_BY USER_BYTES USER_BLOCKS ONLINE_STATUS
------------ ---------- ----------- ---------------------
/home/oracle/app/oradata/orcl/users01.dbf                   4
USERS
   5242880        640 AVAILABLE                              4 YES  3.4360E+10
4194302
         160    4194304         512 ONLINE


FILE_NAME                                             FILE_ID
-------------------------------------------------- ----------
TABLESPACE_NAME
------------------------------------------------------------------------------------------
     BYTES     BLOCKS STATUS                      RELATIVE_FNO AUTOEXTEN
MAXBYTES  MAXBLOCKS
---------- ---------- --------------------------- ------------ ---------
---------- ----------
INCREMENT_BY USER_BYTES USER_BLOCKS ONLINE_STATUS
------------ ---------- ----------- ---------------------
/home/oracle/app/oradata/orcl/undotbs01.dbf                 3
UNDOTBS1
  99614720      12160 AVAILABLE                              3 YES  3.4360E+10
4194302
         640   98566144       12032 ONLINE


FILE_NAME                                             FILE_ID
-------------------------------------------------- ----------
TABLESPACE_NAME
------------------------------------------------------------------------------------------
     BYTES     BLOCKS STATUS                      RELATIVE_FNO AUTOEXTEN
MAXBYTES  MAXBLOCKS
---------- ---------- --------------------------- ------------ ---------
---------- ----------
INCREMENT_BY USER_BYTES USER_BLOCKS ONLINE_STATUS
------------ ---------- ----------- ---------------------
/home/oracle/app/oradata/orcl/sysaux01.dbf                  2
SYSAUX
 576716800      70400 AVAILABLE                              2 YES  3.4360E+10
4194302
        1280  575668224       70272 ONLINE


FILE_NAME                                             FILE_ID
-------------------------------------------------- ----------
TABLESPACE_NAME
------------------------------------------------------------------------------------------
     BYTES     BLOCKS STATUS                      RELATIVE_FNO AUTOEXTEN
MAXBYTES  MAXBLOCKS
---------- ---------- --------------------------- ------------ ---------
---------- ----------
INCREMENT_BY USER_BYTES USER_BLOCKS ONLINE_STATUS
------------ ---------- ----------- ---------------------
/home/oracle/app/oradata/orcl/system01.dbf                  1
SYSTEM
 713031680      87040 AVAILABLE                              1 YES  3.4360E+10
4194302
        1280  711983104       86912 SYSTEM


＋＋系统临时表：
SQL> select * from dba_temp_files;

FILE_NAME                                             FILE_ID
-------------------------------------------------- ----------
TABLESPACE_NAME
------------------------------------------------------------------------------------------
     BYTES     BLOCKS STATUS                RELATIVE_FNO AUTOEXTEN   MAXBYTES
MAXBLOCKS
---------- ---------- --------------------- ------------ --------- ----------
----------
INCREMENT_BY USER_BYTES USER_BLOCKS
------------ ---------- -----------
/home/oracle/app/oradata/orcl/temp01.dbf                    1
TEMP
  30408704       3712 ONLINE                           1 YES
3.4360E+10    4194302
          80   29360128        3584

======================
++系统空间名字对应文件名：
SQL> r
  1* select file_name, tablespace_name from dba_data_files

FILE_NAME
--------------------------------------------------
TABLESPACE_NAME
------------------------------------------------------------------------------------------
/home/oracle/app/oradata/orcl/users01.dbf
USERS

/home/oracle/app/oradata/orcl/undotbs01.dbf
UNDOTBS1

/home/oracle/app/oradata/orcl/sysaux01.dbf
SYSAUX


FILE_NAME
--------------------------------------------------
TABLESPACE_NAME
------------------------------------------------------------------------------------------
/home/oracle/app/oradata/orcl/system01.dbf
SYSTEM


++临时表空间及其文件名：
SQL> select file_name, tablespace_name 
  2  from dba_temp_files;

FILE_NAME
--------------------------------------------------
TABLESPACE_NAME
------------------------------------------------------------------------------------------
/home/oracle/app/oradata/orcl/temp01.dbf
TEMP
++控制文件：
SQL> column name format a60
SQL> select name from v$controlfile;  

NAME
------------------------------------------------------------
/home/oracle/app/oradata/orcl/control01.ctl
/home/oracle/app/recovery_area/orcl/control02.ctl

===================
＋＋查看oracle日志文件：
SQL> column member format a50
SQL> select member from v$logfile;

MEMBER
--------------------------------------------------
/home/oracle/app/oradata/orcl/redo03.log
/home/oracle/app/oradata/orcl/redo02.log
/home/oracle/app/oradata/orcl/redo01.log

======================
++查看oracle数据库是否采用日志归档：
SQL> select dbid, name, log_mode from v$database;

      DBID NAME                           LOG_MODE
---------- ------------------------------ ------------------------------------
1460352071 ORCL                           NOARCHIVELOG

====================
++查看归档文件所在的路径：
SQL> set pagesize 30;
SQL> show parameter log_archive_dest;

NAME                                 TYPE
------------------------------------ ---------------------------------
VALUE
------------------------------
log_archive_dest                     string

log_archive_dest_1                   string

log_archive_dest_10                  string

log_archive_dest_11                  string

log_archive_dest_12                  string

log_archive_dest_13                  string

log_archive_dest_14                  string

log_archive_dest_15                  string

log_archive_dest_16                  string

log_archive_dest_17                  string

log_archive_dest_18                  string

log_archive_dest_19                  string

log_archive_dest_2                   string

NAME                                 TYPE
------------------------------------ ---------------------------------
VALUE
------------------------------

log_archive_dest_20                  string

log_archive_dest_21                  string

log_archive_dest_22                  string

log_archive_dest_23                  string

log_archive_dest_24                  string

log_archive_dest_25                  string

log_archive_dest_26                  string

log_archive_dest_27                  string

log_archive_dest_28                  string

log_archive_dest_29                  string

log_archive_dest_3                   string

log_archive_dest_30                  string


NAME                                 TYPE
------------------------------------ ---------------------------------
VALUE
------------------------------
log_archive_dest_31                  string

log_archive_dest_4                   string

log_archive_dest_5                   string

log_archive_dest_6                   string

log_archive_dest_7                   string

log_archive_dest_8                   string

log_archive_dest_9                   string

log_archive_dest_state_1             string
enable
log_archive_dest_state_10            string
enable
log_archive_dest_state_11            string
enable
log_archive_dest_state_12            string
enable
log_archive_dest_state_13            string
enable
log_archive_dest_state_14            string

NAME                                 TYPE
------------------------------------ ---------------------------------
VALUE
------------------------------
enable
log_archive_dest_state_15            string
enable
log_archive_dest_state_16            string
enable
log_archive_dest_state_17            string
enable
log_archive_dest_state_18            string
enable
log_archive_dest_state_19            string
enable
log_archive_dest_state_2             string
enable
log_archive_dest_state_20            string
enable
log_archive_dest_state_21            string
enable
log_archive_dest_state_22            string
enable
log_archive_dest_state_23            string
enable
log_archive_dest_state_24            string
enable
log_archive_dest_state_25            string
enable

NAME                                 TYPE
------------------------------------ ---------------------------------
VALUE
------------------------------
log_archive_dest_state_26            string
enable
log_archive_dest_state_27            string
enable
log_archive_dest_state_28            string
enable
log_archive_dest_state_29            string
enable
log_archive_dest_state_3             string
enable
log_archive_dest_state_30            string
enable
log_archive_dest_state_31            string
enable
log_archive_dest_state_4             string
enable
log_archive_dest_state_5             string
enable
log_archive_dest_state_6             string
enable
log_archive_dest_state_7             string
enable
log_archive_dest_state_8             string
enable
log_archive_dest_state_9             string

NAME                                 TYPE
------------------------------------ ---------------------------------
VALUE
------------------------------
enable
=====================
＋＋查看参数值，能否被修改以及是否被修改过：
SQL> r
  1  select name, value, ismodified
  2* from v$parameter
NAME                           VALUE                          ISMODIFIED
------------------------------ ------------------------------
------------------------------
asm_preferred_read_failure_gro                                FALSE
ups

asm_diskgroups                                                FALSE
asm_power_limit                1                              FALSE
control_management_pack_access NONE                           FALSE
sqltune_category               DEFAULT                        FALSE
diagnostic_dest                /home/oracle/app               FALSE
tracefile_identifier                                          FALSE
max_dump_file_size             unlimited                      FALSE
trace_enabled                  TRUE                           FALSE

342 rows selected.

=====================
++查看服务器参数：

SQL> show parameter
NAME                                 TYPE
------------------------------------ ---------------------------------
VALUE
------------------------------
tracefile_identifier                 string

transactions                         integer
272
transactions_per_rollback_segment    integer
5
undo_management                      string
AUTO
undo_retention                       integer
900
undo_tablespace                      string
UNDOTBS1
use_indirect_data_buffers            boolean
FALSE
user_dump_dest                       string
/home/oracle/app/diag/rdbms/or
cl/orcl/trace
utl_file_dir                         string

workarea_size_policy                 string
AUTO
xml_db_events                        string
enable

==================
++查看sqlplus参数：
SQL> show all;
appinfo is OFF and set to "SQL*Plus"
arraysize 15
autocommit OFF
autoprint OFF
autorecovery OFF
autotrace OFF
blockterminator "." (hex 2e)
btitle OFF and is the first few characters of the next SELECT statement
cmdsep OFF
colsep " "
compatibility version NATIVE
concat "." (hex 2e)
copycommit 0
COPYTYPECHECK is ON
define "&" (hex 26)
describe DEPTH 1 LINENUM OFF INDENT ON
echo OFF
editfile "afiedt.buf"
embedded OFF
escape OFF
escchar OFF
exitcommit ON
FEEDBACK ON for 6 or more rows
flagger OFF
flush ON
heading ON
headsep "|" (hex 7c)
instance "local"
linesize 100
lno 28
loboffset 1
logsource ""
long 80
longchunksize 80
markup HTML OFF HEAD "<style type='text/css'> body {font:10pt
Arial,Helvetica,sans-serif; color:black; background:White;} p {font:10pt
Arial,Helvetica,sans-serif; color:black; background:White;} table,tr,td
{font:10pt Arial,Helvetica,sans-serif; color:Black; background:#f7f7e7;
padding:0px 0px 0px 0px; margin:0px 0px 0px 0px;} th {font:bold 10pt
Arial,Helvetica,sans-serif; color:#336699; background:#cccc99; padding:0px 0px
0px 0px;} h1 {font:16pt Arial,Helvetica,Geneva,sans-serif; color:#336699;
background-color:White; border-bottom:1px solid #cccc99; margin-top:0pt;
margin-bottom:0pt; padding:0px 0px 0px 0px;-
} h2 {font:bold 10pt Arial,Helvetica,Geneva,sans-serif; color:#336699;
background-color:White; margin-top:4pt; margin-bottom:0pt;} a {font:9pt
Arial,Helvetica,sans-serif; color:#663300; background:#ffffff; margin-top:0pt;
margin-bottom:0pt; vertical-align:top;}</style><title>SQL*Plus Report</title>"
BODY "" TABLE "border='1' width='90%' align='center' summary='Script output'"
SPOOL OFF ENTMAP ON PREFORMAT OFF
newpage 1
null ""
numformat ""
numwidth 10
pagesize 30
PAUSE is OFF
pno 28
recsep WRAP
recsepchar " " (hex 20)
release 1102000100
repfooter OFF and is NULL
repheader OFF and is NULL
securedcol is OFF
serveroutput OFF
shiftinout INVISIBLE
showmode OFF
spool OFF
sqlblanklines OFF
sqlcase MIXED
sqlcode 0
sqlcontinue "> "
sqlnumber ON
sqlpluscompatibility 11.2.0
sqlprefix "#" (hex 23)
sqlprompt "SQL> "
sqlterminator ";" (hex 3b)
suffix "sql"
tab ON
termout ON
timing OFF
trimout ON
trimspool OFF
ttitle OFF and is the first few characters of the next SELECT statement
underline "-" (hex 2d)
USER is "SYS"
verify ON
wrap : lines will be wrapped
errorlogging is OFF

===================
++查看某个系统参数方法：
SQL> show parameter db_block_size;

NAME                                 TYPE
------------------------------------ ---------------------------------
VALUE
------------------------------
db_block_size                        integer
8192
++设置系统参数方法：
++因为某些原因，修改参数失败了
SQL> alter system set db_block_size=8192;
alter system set db_block_size=8192
                 *
ERROR at line 1:
ORA-02095: specified initialization parameter cannot be modified

++密码文件：
 /home/oracle/app/oracle/product/11.2.0/dbhome_1/dbs/orapworcl
＋＋或是:
$ORACLE_HOME/dbs/orapworcl
/home/oracle/app/oracle/product/11.2.0/dbhome_1/dbs/orapworcl
$ORACLE_HOME/dbs/orapw<sid>

===============
++创建密码文件：
[oracle@ctos oracle]$ orapwd
file=/home/oracle/app/oracle/product/11.2.0/dbhome_1/dbs/orapwd_text
entries=40 password=123456
[oracle@ctos oracle]$ ls
/home/oracle/app/oracle/product/11.2.0/dbhome_1/dbs/orapwd_text
/home/oracle/app/oracle/product/11.2.0/dbhome_1/dbs/orapwd_text

=================
++警告文件：
SQL> r
  1  select name, value from v$parameter
  2* where name = 'background_dump_dest'

NAME                 VALUE
-------------------- --------------------------------------------------
background_dump_dest /home/oracle/app/diag/rdbms/orcl/orcl/trace

++文件众多，只展示部分：
[oracle@ctos oracle]$ ls /home/oracle/app/diag/rdbms/orcl/orcl/trace
alert_orcl.log       orcl_ora_23986.trm
orcl_cjq0_14085.trc  orcl_ora_23989.trc
orcl_cjq0_14085.trm  orcl_ora_23989.trm
orcl_cjq0_22139.trc  orcl_ora_24021.trc
orcl_cjq0_22139.trm  orcl_ora_24021.trm
orcl_cjq0_23618.trc  orcl_ora_24110.trc
... ...

++跟踪文件：
++用于跟踪sql语句的执行情况，能看得出sql语句的执行效率
SQL> select value from v$parameter 
  2  where name = 'user_dump_dest';

VALUE
--------------------------------------------------
/home/oracle/app/diag/rdbms/orcl/orcl/trace

++文件众多，只展示部分：
[oracle@ctos oracle]$ ls /home/oracle/app/diag/rdbms/orcl/orcl/trace
alert_orcl.log       orcl_ora_23986.trm
orcl_cjq0_14085.trc  orcl_ora_23989.trc
orcl_cjq0_14085.trm  orcl_ora_23989.trm
orcl_cjq0_22139.trc  orcl_ora_24021.trc
orcl_cjq0_22139.trm  orcl_ora_24021.trm
... ...

++查看系统参数共享池大小：
SQL> show parameter shared_pool_size;

NAME                                 TYPE
------------------------------------ ---------------------------------
VALUE
------------------------------
shared_pool_size                     big integer
0
＋＋修改共享池大小：
SQL> alter system set shared_pool_size=30m;

System altered.

++修改之后大小
SQL> show parameter shared_pool_size;

NAME                                 TYPE
------------------------------------ ---------------------------------
VALUE
------------------------------
shared_pool_size                     big integer
32M

++设置前后的大型池：
SQL> show parameter large_pool_size;

NAME                                 TYPE
------------------------------------ ---------------------------------
VALUE
------------------------------
large_pool_size                      big integer
0

SQL> alter system set large_pool_size=30m
  2  ;  
it
System altered.

SQL       
SQL> show parameter large_pool_size;

NAME                                 TYPE
------------------------------------ ---------------------------------
VALUE
------------------------------
large_pool_size                      big integer
32M
SQL>    

++查看全局区大小：

SQL> show parameter pga;

NAME                                 TYPE
------------------------------------ ---------------------------------
VALUE
------------------------------
pga_aggregate_target                 big integer
0
++查询当前实例进程信息：
SQL> column description format a50
SQL> r  
  1* select name, description from v$bgprocess

NAME            DESCRIPTION
--------------- --------------------------------------------------
PMON            process cleanup
VKTM            Virtual Keeper of TiMe process
GEN0            generic0
DIAG            diagnosibility process
DBRM            DataBase Resource Manager
VKRM            Virtual sKeduler for Resource Manager
RSMN            Remote Slave Monitor
PING            interconnect latency measurement
FMON            File Mapping Monitor Process
PSP0            process spawner 0
ACMS            Atomic Controlfile to Memory Server
DSKM            slave DiSKMon process
DIA0            diagnosibility process 0
DIA1            diagnosibility process 1
DIA2            diagnosibility process 2
DIA3            diagnosibility process 3
DIA4            diagnosibility process 4
DIA5            diagnosibility process 5
DIA6            diagnosibility process 6
DIA7            diagnosibility process 7
DIA8            diagnosibility process 8
DIA9            diagnosibility process 9
LMON            global enqueue service monitor
LMD0            global enqueue service daemon 0
LMS0            global cache service process 0
LMS1            global cache service process 1
LMS2            global cache service process 2
LMS3            global cache service process 3
LMS4            global cache service process 4
LMS5            global cache service process 5
LMS6            global cache service process 6
LMS7            global cache service process 7
LMS8            global cache service process 8
LMS9            global cache service process 9
LMSa            global cache service process 10
LMSb            global cache service process 11
LMSc            global cache service process 12
LMSd            global cache service process 13
LMSe            global cache service process 14
LMSf            global cache service process 15
LMSg            global cache service process 16
LMSh            global cache service process 17
LMSi            global cache service process 18
LMSj            global cache service process 19
LMSk            global cache service process 20
LMSl            global cache service process 21
LMSm            global cache service process 22

NAME            DESCRIPTION
--------------- --------------------------------------------------
LMSn            global cache service process 23
LMSo            global cache service process 24
LMSp            global cache service process 25
LMSq            global cache service process 26
LMSr            global cache service process 27
LMSs            global cache service process 28
LMSt            global cache service process 29
LMSu            global cache service process 30
LMSv            global cache service process 31
LMSw            global cache service process 32
LMSx            global cache service process 33
LMSy            global cache service process 34
RMS0            rac management server
LMHB            lm heartbeat monitor
MMAN            Memory Manager
DBW0            db writer process 0
DBW1            db writer process 1
DBW2            db writer process 2
DBW3            db writer process 3
DBW4            db writer process 4
DBW5            db writer process 5
DBW6            db writer process 6
DBW7            db writer process 7
DBW8            db writer process 8
DBW9            db writer process 9
DBWa            db writer process 10 (a)
DBWb            db writer process 11 (b)
DBWc            db writer process 12 (c)
DBWd            db writer process 13 (d)
DBWe            db writer process 14 (e)
DBWf            db writer process 15 (f)
DBWg            db writer process 16 (g)
DBWh            db writer process 17 (h)
DBWi            db writer process 18 (i)
DBWj            db writer process 19 (j)
DBWk            db writer process 20 (k)
DBWl            db writer process 21 (l)
DBWm            db writer process 22 (m)
DBWn            db writer process 23 (n)
DBWo            db writer process 24 (o)
DBWp            db writer process 25 (p)
DBWq            db writer process 26 (q)
DBWr            db writer process 27 (r)
DBWs            db writer process 28 (s)
DBWt            db writer process 29 (t)
DBWu            db writer process 30 (u)
DBWv            db writer process 31 (v)

NAME            DESCRIPTION
--------------- --------------------------------------------------
DBWw            db writer process 32 (s)
DBWx            db writer process 33 (t)
DBWy            db writer process 34 (u)
DBWz            db writer process 35 (v)
MRP0            Managed Standby Recovery
ARC0            Archival Process 0
ARC1            Archival Process 1
ARC2            Archival Process 2
ARC3            Archival Process 3
ARC4            Archival Process 4
ARC5            Archival Process 5
ARC6            Archival Process 6
ARC7            Archival Process 7
ARC8            Archival Process 8
ARC9            Archival Process 9
ARCa            Archival Process 10
ARCb            Archival Process 11
ARCc            Archival Process 12
ARCd            Archival Process 13
ARCe            Archival Process 14
ARCf            Archival Process 15
ARCg            Archival Process 16
ARCh            Archival Process 17
ARCi            Archival Process 18
ARCj            Archival Process 19
ARCk            Archival Process 20
ARCl            Archival Process 21
ARCm            Archival Process 22
ARCn            Archival Process 23
ARCo            Archival Process 24
ARCp            Archival Process 25
ARCq            Archival Process 26
ARCr            Archival Process 27
ARCs            Archival Process 28
ARCt            Archival Process 29
NSA1            Redo transport NSA1
NSS1            Redo transport NSS1
NSA2            Redo transport NSA2
NSS2            Redo transport NSS2
NSA3            Redo transport NSA3
NSS3            Redo transport NSS3
NSA4            Redo transport NSA4
NSS4            Redo transport NSS4
NSA5            Redo transport NSA5
NSS5            Redo transport NSS5
NSA6            Redo transport NSA6
NSS6            Redo transport NSS6

NAME            DESCRIPTION
--------------- --------------------------------------------------
NSA7            Redo transport NSA7
NSS7            Redo transport NSS7
NSA8            Redo transport NSA8
NSS8            Redo transport NSS8
NSA9            Redo transport NSA9
NSS9            Redo transport NSS9
NSAA            Redo transport NSAA
NSSA            Redo transport NSSA
NSAB            Redo transport NSAB
NSSB            Redo transport NSSB
NSAC            Redo transport NSAC
NSSC            Redo transport NSSC
NSAD            Redo transport NSAD
NSSD            Redo transport NSSD
NSAE            Redo transport NSAE
NSSE            Redo transport NSSE
NSAF            Redo transport NSAF
NSSF            Redo transport NSSF
NSAG            Redo transport NSAG
NSSG            Redo transport NSSG
NSAH            Redo transport NSAH
NSSH            Redo transport NSSH
NSAI            Redo transport NSAI
NSSI            Redo transport NSSI
NSAJ            Redo transport NSAJ
NSSJ            Redo transport NSSJ
NSAK            Redo transport NSAK
NSSK            Redo transport NSSK
NSAL            Redo transport NSAL
NSSL            Redo transport NSSL
NSAM            Redo transport NSAM
NSSM            Redo transport NSSM
NSAN            Redo transport NSAN
NSSN            Redo transport NSSN
NSAO            Redo transport NSAO
NSSO            Redo transport NSSO
NSAP            Redo transport NSAP
NSSP            Redo transport NSSP
NSAQ            Redo transport NSAQ
NSSQ            Redo transport NSSQ
NSAR            Redo transport NSAR
NSSR            Redo transport NSSR
NSAS            Redo transport NSAS
NSSS            Redo transport NSSS
NSAT            Redo transport NSAT
NSST            Redo transport NSST
NSAU            Redo transport NSAU

NAME            DESCRIPTION
--------------- --------------------------------------------------
NSSU            Redo transport NSSU
NSAV            Redo transport NSAV
NSSV            Redo transport NSSV
LGWR            Redo etc.
LCK0            Lock Process 0
CKPT            checkpoint
ABMR            Auto BMR Background Process
LSP1            Dictionary build process for Logical Standby
LSP0            Logical Standby
LSP2            Set Guard Standby Information for Logical Standby
CTWR            Change Tracking Writer
RVWR            Recovery Writer
FBDA            Flashback Data Archiver Process
SMON            System Monitor Process
SMCO            Space Manager Process
RECO            distributed recovery
GTX0            Global Txn process 0
GTX1            Global Txn process 1
GTX2            Global Txn process 2
GTX3            Global Txn process 3
GTX4            Global Txn process 4
GTX5            Global Txn process 5
GTX6            Global Txn process 6
GTX7            Global Txn process 7
GTX8            Global Txn process 8
GTX9            Global Txn process 9
GTXa            Global Txn process 10
GTXb            Global Txn process 11
GTXc            Global Txn process 12
GTXd            Global Txn process 13
GTXe            Global Txn process 14
GTXf            Global Txn process 15
GTXg            Global Txn process 16
GTXh            Global Txn process 17
GTXi            Global Txn process 18
GTXj            Global Txn process 19
CJQ0            Job Queue Coordinator
RCBG            Result Cache: Background
EMNC            EMON Coordinator
QMNC            AQ Coordinator
DMON            DG Broker Monitor Process
RSM0            Data Guard Broker Resource Guard Process 0
NSV0            Data Guard Broker NetSlave Process 0
NSV1            Data Guard Broker NetSlave Process 1
NSV2            Data Guard Broker NetSlave Process 2
NSV3            Data Guard Broker NetSlave Process 3
NSV4            Data Guard Broker NetSlave Process 4

NAME            DESCRIPTION
--------------- --------------------------------------------------
NSV5            Data Guard Broker NetSlave Process 5
NSV6            Data Guard Broker NetSlave Process 6
NSV7            Data Guard Broker NetSlave Process 7
NSV8            Data Guard Broker NetSlave Process 8
NSV9            Data Guard Broker NetSlave Process 9
NSVA            Data Guard Broker NetSlave Process A
NSVB            Data Guard Broker NetSlave Process B
NSVC            Data Guard Broker NetSlave Process C
NSVD            Data Guard Broker NetSlave Process D
NSVE            Data Guard Broker NetSlave Process E
NSVF            Data Guard Broker NetSlave Process F
NSVG            Data Guard Broker NetSlave Process G
NSVH            Data Guard Broker NetSlave Process H
NSVI            Data Guard Broker NetSlave Process I
NSVJ            Data Guard Broker NetSlave Process J
NSVK            Data Guard Broker NetSlave Process K
NSVL            Data Guard Broker NetSlave Process L
NSVM            Data Guard Broker NetSlave Process M
NSVN            Data Guard Broker NetSlave Process N
NSVO            Data Guard Broker NetSlave Process O
NSVP            Data Guard Broker NetSlave Process P
NSVQ            Data Guard Broker NetSlave Process Q
NSVR            Data Guard Broker NetSlave Process R
NSVS            Data Guard Broker NetSlave Process S
NSVT            Data Guard Broker NetSlave Process T
NSVU            Data Guard Broker NetSlave Process U
INSV            Data Guard Broker INstance SlaVe Process
FSFP            Data Guard Broker FSFO Pinger
RBAL            ASM Rebalance master
ARB0            ASM Rebalance 0
ARB1            ASM Rebalance 1
ARB2            ASM Rebalance 2
ARB3            ASM Rebalance 3
ARB4            ASM Rebalance 4
ARB5            ASM Rebalance 5
ARB6            ASM Rebalance 6
ARB7            ASM Rebalance 7
ARB8            ASM Rebalance 8
ARB9            ASM Rebalance 9
ARBA            ASM Rebalance 10
ASMB            ASM Background
MARK            mark AU for resync koordinator
GMON            diskgroup monitor
VBG0            Volume BG 0
VBG1            Volume BG 1
VBG2            Volume BG 2
VBG3            Volume BG 3

NAME            DESCRIPTION
--------------- --------------------------------------------------
VBG4            Volume BG 4
VBG5            Volume BG 5
VBG6            Volume BG 6
VBG7            Volume BG 7
VBG8            Volume BG 8
VBG9            Volume BG 9
VDBG            Volume Driver BG
VMB0            Volume Membership 0
ACFS            ACFS CSS
MMON            Manageability Monitor Process
MMNL            Manageability Monitor Process 2
XDMG            cell automation manager
XDWK            cell automation worker actions

295 rows selected.

++查找表的中间一部分：
SQL> l  
  1  select * from (
  2  select a.*, rownum as rn from dba_segments a
  3  where rownum < 100
  4* ) b where b.rn < 50
++先查找一个表格的一部分，并将表格加上行号的一列
＋＋并将此列命名成一个新字段，并作为主查询表的子句表
＋＋外层查询查询另外一部分条件即可

++开启跟踪计划：
SQL> set autotrace traceonly explain

SQL> select user from dual;

Execution Plan
----------------------------------------------------------
Plan hash value: 1388734953

-----------------------------------------------------------------
| Id  | Operation        | Name | Rows  | Cost (%CPU)| Time     |
-----------------------------------------------------------------
|   0 | SELECT STATEMENT |      |     1 |     2   (0)| 00:00:01 |
|   1 |  FAST DUAL       |      |     1 |     2   (0)| 00:00:01 |
-----------------------------------------------------------------

SQL> r
  1  select * from (
  2  select a.*, rownum as rn from dba_segments a
  3  where rownum < 100
  4* ) b where b.rn < 50

Execution Plan
----------------------------------------------------------
Plan hash value: 3287195197

------------------------------------------------------------------------------------------------------
| Id  | Operation                           | Name           | Rows  | Bytes | Cost (%CPU)| Time     |
------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                    |                |    99 | 33561 |  1453   (1)| 00:00:18 |
|*  1 |  VIEW                               |                |    99 | 33561 |  1453   (1)| 00:00:18 |
|*  2 |   COUNT STOPKEY                     |                |       |       |            |          |
|   3 |    VIEW                             | SYS_DBA_SEGS   |  1449 |   568K|  1453   (1)| 00:00:18 |
|   4 |     UNION-ALL                       |                |       |       |            |          |
|   5 |      NESTED LOOPS OUTER             |                |     1 |   183 |  1375   (1)| 00:00:17 |
|   6 |       NESTED LOOPS                  |                |     1 |   165 |  1374   (1)| 00:00:17 |
|   7 |        NESTED LOOPS                 |                |     1 |   146 |  1373   (1)| 00:00:17 |
|   8 |         NESTED LOOPS                |                |     1 |   137 |  1372   (1)| 00:00:17 |
|*  9 |          HASH JOIN                  |                |     8 |   768 |  1356   (1)| 00:00:17 |
|  10 |           VIEW                      | SYS_OBJECTS    |  7677 |   247K|  1309   (1)| 00:00:16 |
|  11 |            UNION-ALL                |                |       |       |            |          |
|* 12 |             TABLE ACCESS FULL       | TAB$           |  2769 | 63687 |   365   (0)| 00:00:05 |
|  13 |             TABLE ACCESS FULL       | TABPART$       |   106 |  1696 |     3   (0)| 00:00:01 |
|  14 |             TABLE ACCESS FULL       | CLU$           |    10 |   140 |   365   (0)| 00:00:05 |
|* 15 |             TABLE ACCESS FULL       | IND$           |  4663 | 83934 |   365   (0)| 00:00:05 |
|  16 |             TABLE ACCESS FULL       | INDPART$       |   123 |  1968 |     3   (0)| 00:00:01 |
|* 17 |             TABLE ACCESS FULL       | LOB$           |     3 |    60 |   201   (0)| 00:00:03 |
|  18 |             TABLE ACCESS FULL       | TABSUBPART$    |     1 |    52 |     2   (0)| 00:00:01 |
|  19 |             TABLE ACCESS FULL       | INDSUBPART$    |     1 |    52 |     2   (0)| 00:00:01 |
|  20 |             TABLE ACCESS FULL       | LOBFRAG$       |     1 |    17 |     2   (0)| 00:00:01 |
|  21 |           TABLE ACCESS FULL         | SEG$           |  5449 |   335K|    46   (0)| 00:00:01 |
|  22 |          TABLE ACCESS BY INDEX ROWID| OBJ$           |     1 |    41 |     2   (0)| 00:00:01 |
|* 23 |           INDEX RANGE SCAN          | I_OBJ1         |     1 |       |     1   (0)| 00:00:01 |
|  24 |         TABLE ACCESS BY INDEX ROWID | FILE$          |     1 |     9 |     1   (0)| 00:00:01 |
|* 25 |          INDEX UNIQUE SCAN          | I_FILE2        |     1 |       |     0   (0)| 00:00:01 |
|  26 |        TABLE ACCESS CLUSTER         | TS$            |     1 |    19 |     1   (0)| 00:00:01 |
|* 27 |         INDEX UNIQUE SCAN           | I_TS#          |     1 |       |     0   (0)| 00:00:01 |
|  28 |       TABLE ACCESS CLUSTER          | USER$          |     1 |    18 |     1   (0)| 00:00:01 |
|* 29 |        INDEX UNIQUE SCAN            | I_USER#        |     1 |       |     0   (0)| 00:00:01 |
|* 30 |      HASH JOIN OUTER                |                |     7 |  1043 |    23   (9)| 00:00:01 |
|* 31 |       HASH JOIN                     |                |     7 |   917 |    19   (6)| 00:00:01 |
|* 32 |        HASH JOIN                    |                |     7 |   784 |    16   (7)| 00:00:01 |
|  33 |         NESTED LOOPS                |                |     7 |   721 |    13   (0)| 00:00:01 |
|* 34 |          TABLE ACCESS FULL          | UNDO$          |    11 |   407 |     2   (0)| 00:00:01 |
|* 35 |          TABLE ACCESS CLUSTER       | SEG$           |     1 |    66 |     1   (0)| 00:00:01 |
|* 36 |           INDEX UNIQUE SCAN         | I_FILE#_BLOCK# |     1 |       |     0   (0)| 00:00:01 |
|  37 |         TABLE ACCESS FULL           | FILE$          |     4 |    36 |     2   (0)| 00:00:01 |
|  38 |        TABLE ACCESS FULL            | TS$            |     5 |    95 |     3   (0)| 00:00:01 |
|  39 |       TABLE ACCESS FULL             | USER$          |    87 |  1566 |     3   (0)| 00:00:01 |
|* 40 |      HASH JOIN RIGHT OUTER          |                |  1441 |   160K|    56   (4)| 00:00:01 |
|  41 |       TABLE ACCESS FULL             | USER$          |    87 |  1566 |     3   (0)| 00:00:01 |
|* 42 |       HASH JOIN                     |                |  1441 |   135K|    52   (2)| 00:00:01 |
|  43 |        TABLE ACCESS FULL            | TS$            |     5 |    95 |     3   (0)| 00:00:01 |
|* 44 |        HASH JOIN                    |                |  1441 |   108K|    49   (3)| 00:00:01 |
|  45 |         TABLE ACCESS FULL           | FILE$          |     4 |    36 |     2   (0)| 00:00:01 |
|* 46 |         TABLE ACCESS FULL           | SEG$           |  1441 | 97988 |    46   (0)| 00:00:01 |
------------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   1 - filter("B"."RN"<50)
   2 - filter(ROWNUM<100)
   9 - access("S"."FILE#"="SO"."HEADER_FILE" AND "S"."BLOCK#"="SO"."HEADER_BLOCK" AND
              "S"."TS#"="SO"."TS_NUMBER" AND "S"."TYPE#"="SO"."SEGMENT_TYPE_ID")
  12 - filter(BITAND("T"."PROPERTY",1024)=0)
  15 - filter("I"."TYPE#"=1 OR "I"."TYPE#"=2 OR "I"."TYPE#"=3 OR "I"."TYPE#"=4 OR
              "I"."TYPE#"=6 OR "I"."TYPE#"=7 OR "I"."TYPE#"=8 OR "I"."TYPE#"=9)
  17 - filter(BITAND("L"."PROPERTY",64)=0 OR BITAND("L"."PROPERTY",128)=128)
  23 - access("O"."OBJ#"="SO"."OBJECT_ID" AND "O"."TYPE#"="SO"."OBJECT_TYPE_ID")
       filter("O"."TYPE#"="SO"."OBJECT_TYPE_ID")
  25 - access("S"."TS#"="F"."TS#" AND "S"."FILE#"="F"."RELFILE#")
  27 - access("S"."TS#"="TS"."TS#")
  29 - access("O"."OWNER#"="U"."USER#"(+))
  30 - access("S"."USER#"="U"."USER#"(+))
  31 - access("S"."TS#"="TS"."TS#")
  32 - access("UN"."TS#"="F"."TS#" AND "UN"."FILE#"="F"."RELFILE#")
  34 - filter("UN"."STATUS$"<>1)
  35 - filter("S"."TYPE#"=1 OR "S"."TYPE#"=10)
  36 - access("S"."TS#"="UN"."TS#" AND "S"."FILE#"="UN"."FILE#" AND
              "S"."BLOCK#"="UN"."BLOCK#")
  40 - access("S"."USER#"="U"."USER#"(+))
  42 - access("S"."TS#"="TS"."TS#")
  44 - access("S"."TS#"="F"."TS#" AND "S"."FILE#"="F"."RELFILE#")
  46 - filter("S"."TYPE#"<>6 AND "S"."TYPE#"<>5 AND "S"."TYPE#"<>8 AND "S"."TYPE#"<>10 AND
              "S"."TYPE#"<>1)
++打开所有跟踪计划：
SQL> set autotrace on
49 rows selected.


Execution Plan
----------------------------------------------------------
Plan hash value: 3287195197

------------------------------------------------------------------------------------------------------
| Id  | Operation                           | Name           | Rows  | Bytes |
Cost (%CPU)| Time     |
------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                    |                |    99 | 33561 |
1453   (1)| 00:00:18 |
|*  1 |  VIEW                               |                |    99 | 33561 |
1453   (1)| 00:00:18 |
|*  2 |   COUNT STOPKEY                     |                |       |       |
|          |
|   3 |    VIEW                             | SYS_DBA_SEGS   |  1449 |   568K|
1453   (1)| 00:00:18 |
|   4 |     UNION-ALL                       |                |       |       |
|          |
|   5 |      NESTED LOOPS OUTER             |                |     1 |   183 |
1375   (1)| 00:00:17 |
|   6 |       NESTED LOOPS                  |                |     1 |   165 |
1374   (1)| 00:00:17 |
|   7 |        NESTED LOOPS                 |                |     1 |   146 |
1373   (1)| 00:00:17 |
|   8 |         NESTED LOOPS                |                |     1 |   137 |
1372   (1)| 00:00:17 |
|*  9 |          HASH JOIN                  |                |     8 |   768 |
1356   (1)| 00:00:17 |
|  10 |           VIEW                      | SYS_OBJECTS    |  7677 |   247K|
1309   (1)| 00:00:16 |
|  11 |            UNION-ALL                |                |       |       |
|          |
|* 12 |             TABLE ACCESS FULL       | TAB$           |  2769 | 63687 |
365   (0)| 00:00:05 |
|  13 |             TABLE ACCESS FULL       | TABPART$       |   106 |  1696 |
3   (0)| 00:00:01 |
|  14 |             TABLE ACCESS FULL       | CLU$           |    10 |   140 |
365   (0)| 00:00:05 |
|* 15 |             TABLE ACCESS FULL       | IND$           |  4663 | 83934 |
365   (0)| 00:00:05 |
|  16 |             TABLE ACCESS FULL       | INDPART$       |   123 |  1968 |
3   (0)| 00:00:01 |
|* 17 |             TABLE ACCESS FULL       | LOB$           |     3 |    60 |
201   (0)| 00:00:03 |
|  18 |             TABLE ACCESS FULL       | TABSUBPART$    |     1 |    52 |
2   (0)| 00:00:01 |
|  19 |             TABLE ACCESS FULL       | INDSUBPART$    |     1 |    52 |
2   (0)| 00:00:01 |
|  20 |             TABLE ACCESS FULL       | LOBFRAG$       |     1 |    17 |
2   (0)| 00:00:01 |
|  21 |           TABLE ACCESS FULL         | SEG$           |  5449 |   335K|
46   (0)| 00:00:01 |
|  22 |          TABLE ACCESS BY INDEX ROWID| OBJ$           |     1 |    41 |
2   (0)| 00:00:01 |
|* 23 |           INDEX RANGE SCAN          | I_OBJ1         |     1 |       |
1   (0)| 00:00:01 |
|  24 |         TABLE ACCESS BY INDEX ROWID | FILE$          |     1 |     9 |
1   (0)| 00:00:01 |
|* 25 |          INDEX UNIQUE SCAN          | I_FILE2        |     1 |       |
0   (0)| 00:00:01 |
|  26 |        TABLE ACCESS CLUSTER         | TS$            |     1 |    19 |
1   (0)| 00:00:01 |
|* 27 |         INDEX UNIQUE SCAN           | I_TS#          |     1 |       |
0   (0)| 00:00:01 |
|  28 |       TABLE ACCESS CLUSTER          | USER$          |     1 |    18 |
1   (0)| 00:00:01 |
|* 29 |        INDEX UNIQUE SCAN            | I_USER#        |     1 |       |
0   (0)| 00:00:01 |
|* 30 |      HASH JOIN OUTER                |                |     7 |  1043 |
23   (9)| 00:00:01 |
|* 31 |       HASH JOIN                     |                |     7 |   917 |
19   (6)| 00:00:01 |
|* 32 |        HASH JOIN                    |                |     7 |   784 |
16   (7)| 00:00:01 |
|  33 |         NESTED LOOPS                |                |     7 |   721 |
13   (0)| 00:00:01 |
|* 34 |          TABLE ACCESS FULL          | UNDO$          |    11 |   407 |
2   (0)| 00:00:01 |
|* 35 |          TABLE ACCESS CLUSTER       | SEG$           |     1 |    66 |
1   (0)| 00:00:01 |
|* 36 |           INDEX UNIQUE SCAN         | I_FILE#_BLOCK# |     1 |       |
0   (0)| 00:00:01 |
|  37 |         TABLE ACCESS FULL           | FILE$          |     4 |    36 |
2   (0)| 00:00:01 |
|  38 |        TABLE ACCESS FULL            | TS$            |     5 |    95 |
3   (0)| 00:00:01 |
|  39 |       TABLE ACCESS FULL             | USER$          |    87 |  1566 |
3   (0)| 00:00:01 |
|* 40 |      HASH JOIN RIGHT OUTER          |                |  1441 |   160K|
56   (4)| 00:00:01 |
|  41 |       TABLE ACCESS FULL             | USER$          |    87 |  1566 |
3   (0)| 00:00:01 |
|* 42 |       HASH JOIN                     |                |  1441 |   135K|
52   (2)| 00:00:01 |
|  43 |        TABLE ACCESS FULL            | TS$            |     5 |    95 |
3   (0)| 00:00:01 |
|* 44 |        HASH JOIN                    |                |  1441 |   108K|
49   (3)| 00:00:01 |
|  45 |         TABLE ACCESS FULL           | FILE$          |     4 |    36 |
2   (0)| 00:00:01 |
|* 46 |         TABLE ACCESS FULL           | SEG$           |  1441 | 97988 |
46   (0)| 00:00:01 |
------------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   1 - filter("B"."RN"<50)
   2 - filter(ROWNUM<100)
   9 - access("S"."FILE#"="SO"."HEADER_FILE" AND
"S"."BLOCK#"="SO"."HEADER_BLOCK" AND
              "S"."TS#"="SO"."TS_NUMBER" AND
"S"."TYPE#"="SO"."SEGMENT_TYPE_ID")
  12 - filter(BITAND("T"."PROPERTY",1024)=0)
  15 - filter("I"."TYPE#"=1 OR "I"."TYPE#"=2 OR "I"."TYPE#"=3 OR "I"."TYPE#"=4
OR
              "I"."TYPE#"=6 OR "I"."TYPE#"=7 OR "I"."TYPE#"=8 OR
"I"."TYPE#"=9)
  17 - filter(BITAND("L"."PROPERTY",64)=0 OR BITAND("L"."PROPERTY",128)=128)
  23 - access("O"."OBJ#"="SO"."OBJECT_ID" AND
"O"."TYPE#"="SO"."OBJECT_TYPE_ID")
       filter("O"."TYPE#"="SO"."OBJECT_TYPE_ID")
  25 - access("S"."TS#"="F"."TS#" AND "S"."FILE#"="F"."RELFILE#")
  27 - access("S"."TS#"="TS"."TS#")
  29 - access("O"."OWNER#"="U"."USER#"(+))
  30 - access("S"."USER#"="U"."USER#"(+))
  31 - access("S"."TS#"="TS"."TS#")
  32 - access("UN"."TS#"="F"."TS#" AND "UN"."FILE#"="F"."RELFILE#")
  34 - filter("UN"."STATUS$"<>1)
  35 - filter("S"."TYPE#"=1 OR "S"."TYPE#"=10)
  36 - access("S"."TS#"="UN"."TS#" AND "S"."FILE#"="UN"."FILE#" AND
              "S"."BLOCK#"="UN"."BLOCK#")
  40 - access("S"."USER#"="U"."USER#"(+))
  42 - access("S"."TS#"="TS"."TS#")
  44 - access("S"."TS#"="F"."TS#" AND "S"."FILE#"="F"."RELFILE#")
  46 - filter("S"."TYPE#"<>6 AND "S"."TYPE#"<>5 AND "S"."TYPE#"<>8 AND
"S"."TYPE#"<>10 AND
              "S"."TYPE#"<>1)


Statistics
----------------------------------------------------------
          0  recursive calls
          0  db block gets
        537  consistent gets
          0  physical reads
          0  redo size
       4629  bytes sent via SQL*Net to client
        557  bytes received via SQL*Net from client
          5  SQL*Net roundtrips to/from client
          0  sorts (memory)
          0  sorts (disk)
         49  rows processed

49 rows selected.


Execution Plan
----------------------------------------------------------
Plan hash value: 3287195197

------------------------------------------------------------------------------------------------------
| Id  | Operation                           | Name           | Rows  | Bytes | Cost (%CPU)| Time     |
------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                    |                |    99 | 33561 |  1453   (1)| 00:00:18 |
|*  1 |  VIEW                               |                |    99 | 33561 |  1453   (1)| 00:00:18 |
|*  2 |   COUNT STOPKEY                     |                |       |       |            |          |
|   3 |    VIEW                             | SYS_DBA_SEGS   |  1449 |   568K|  1453   (1)| 00:00:18 |
|   4 |     UNION-ALL                       |                |       |       |            |          |
|   5 |      NESTED LOOPS OUTER             |                |     1 |   183 |  1375   (1)| 00:00:17 |
|   6 |       NESTED LOOPS                  |                |     1 |   165 |  1374   (1)| 00:00:17 |
|   7 |        NESTED LOOPS                 |                |     1 |   146 |  1373   (1)| 00:00:17 |
|   8 |         NESTED LOOPS                |                |     1 |   137 |  1372   (1)| 00:00:17 |
|*  9 |          HASH JOIN                  |                |     8 |   768 |  1356   (1)| 00:00:17 |
|  10 |           VIEW                      | SYS_OBJECTS    |  7677 |   247K|  1309   (1)| 00:00:16 |
|  11 |            UNION-ALL                |                |       |       |            |          |
|* 12 |             TABLE ACCESS FULL       | TAB$           |  2769 | 63687 |   365   (0)| 00:00:05 |
|  13 |             TABLE ACCESS FULL       | TABPART$       |   106 |  1696 |     3   (0)| 00:00:01 |
|  14 |             TABLE ACCESS FULL       | CLU$           |    10 |   140 |   365   (0)| 00:00:05 |
|* 15 |             TABLE ACCESS FULL       | IND$           |  4663 | 83934 |   365   (0)| 00:00:05 |
|  16 |             TABLE ACCESS FULL       | INDPART$       |   123 |  1968 |     3   (0)| 00:00:01 |
|* 17 |             TABLE ACCESS FULL       | LOB$           |     3 |    60 |   201   (0)| 00:00:03 |
|  18 |             TABLE ACCESS FULL       | TABSUBPART$    |     1 |    52 |     2   (0)| 00:00:01 |
|  19 |             TABLE ACCESS FULL       | INDSUBPART$    |     1 |    52 |     2   (0)| 00:00:01 |
|  20 |             TABLE ACCESS FULL       | LOBFRAG$       |     1 |    17 |     2   (0)| 00:00:01 |
|  21 |           TABLE ACCESS FULL         | SEG$           |  5449 |   335K|    46   (0)| 00:00:01 |
|  22 |          TABLE ACCESS BY INDEX ROWID| OBJ$           |     1 |    41 |     2   (0)| 00:00:01 |
|* 23 |           INDEX RANGE SCAN          | I_OBJ1         |     1 |       |     1   (0)| 00:00:01 |
|  24 |         TABLE ACCESS BY INDEX ROWID | FILE$          |     1 |     9 |     1   (0)| 00:00:01 |
|* 25 |          INDEX UNIQUE SCAN          | I_FILE2        |     1 |       |     0   (0)| 00:00:01 |
|  26 |        TABLE ACCESS CLUSTER         | TS$            |     1 |    19 |     1   (0)| 00:00:01 |
|* 27 |         INDEX UNIQUE SCAN           | I_TS#          |     1 |       |     0   (0)| 00:00:01 |
|  28 |       TABLE ACCESS CLUSTER          | USER$          |     1 |    18 |     1   (0)| 00:00:01 |
|* 29 |        INDEX UNIQUE SCAN            | I_USER#        |     1 |       |     0   (0)| 00:00:01 |
|* 30 |      HASH JOIN OUTER                |                |     7 |  1043 |    23   (9)| 00:00:01 |
|* 31 |       HASH JOIN                     |                |     7 |   917 |    19   (6)| 00:00:01 |
|* 32 |        HASH JOIN                    |                |     7 |   784 |    16   (7)| 00:00:01 |
|  33 |         NESTED LOOPS                |                |     7 |   721 |    13   (0)| 00:00:01 |
|* 34 |          TABLE ACCESS FULL          | UNDO$          |    11 |   407 |     2   (0)| 00:00:01 |
|* 35 |          TABLE ACCESS CLUSTER       | SEG$           |     1 |    66 |     1   (0)| 00:00:01 |
|* 36 |           INDEX UNIQUE SCAN         | I_FILE#_BLOCK# |     1 |       |     0   (0)| 00:00:01 |
|  37 |         TABLE ACCESS FULL           | FILE$          |     4 |    36 |     2   (0)| 00:00:01 |
|  38 |        TABLE ACCESS FULL            | TS$            |     5 |    95 |     3   (0)| 00:00:01 |
|  39 |       TABLE ACCESS FULL             | USER$          |    87 |  1566 |     3   (0)| 00:00:01 |
|* 40 |      HASH JOIN RIGHT OUTER          |                |  1441 |   160K|    56   (4)| 00:00:01 |
|  41 |       TABLE ACCESS FULL             | USER$          |    87 |  1566 |     3   (0)| 00:00:01 |
|* 42 |       HASH JOIN                     |                |  1441 |   135K|    52   (2)| 00:00:01 |
|  43 |        TABLE ACCESS FULL            | TS$            |     5 |    95 |     3   (0)| 00:00:01 |
|* 44 |        HASH JOIN                    |                |  1441 |   108K|    49   (3)| 00:00:01 |
|  45 |         TABLE ACCESS FULL           | FILE$          |     4 |    36 |     2   (0)| 00:00:01 |
|* 46 |         TABLE ACCESS FULL           | SEG$           |  1441 | 97988 |    46   (0)| 00:00:01 |
------------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   1 - filter("B"."RN"<50)
   2 - filter(ROWNUM<100)
   9 - access("S"."FILE#"="SO"."HEADER_FILE" AND "S"."BLOCK#"="SO"."HEADER_BLOCK" AND
              "S"."TS#"="SO"."TS_NUMBER" AND "S"."TYPE#"="SO"."SEGMENT_TYPE_ID")
  12 - filter(BITAND("T"."PROPERTY",1024)=0)
  15 - filter("I"."TYPE#"=1 OR "I"."TYPE#"=2 OR "I"."TYPE#"=3 OR "I"."TYPE#"=4 OR
              "I"."TYPE#"=6 OR "I"."TYPE#"=7 OR "I"."TYPE#"=8 OR "I"."TYPE#"=9)
  17 - filter(BITAND("L"."PROPERTY",64)=0 OR BITAND("L"."PROPERTY",128)=128)
  23 - access("O"."OBJ#"="SO"."OBJECT_ID" AND "O"."TYPE#"="SO"."OBJECT_TYPE_ID")
       filter("O"."TYPE#"="SO"."OBJECT_TYPE_ID")
  25 - access("S"."TS#"="F"."TS#" AND "S"."FILE#"="F"."RELFILE#")
  27 - access("S"."TS#"="TS"."TS#")
  29 - access("O"."OWNER#"="U"."USER#"(+))
  30 - access("S"."USER#"="U"."USER#"(+))
  31 - access("S"."TS#"="TS"."TS#")
  32 - access("UN"."TS#"="F"."TS#" AND "UN"."FILE#"="F"."RELFILE#")
  34 - filter("UN"."STATUS$"<>1)
  35 - filter("S"."TYPE#"=1 OR "S"."TYPE#"=10)
  36 - access("S"."TS#"="UN"."TS#" AND "S"."FILE#"="UN"."FILE#" AND
              "S"."BLOCK#"="UN"."BLOCK#")
  40 - access("S"."USER#"="U"."USER#"(+))
  42 - access("S"."TS#"="TS"."TS#")
  44 - access("S"."TS#"="F"."TS#" AND "S"."FILE#"="F"."RELFILE#")
  46 - filter("S"."TYPE#"<>6 AND "S"."TYPE#"<>5 AND "S"."TYPE#"<>8 AND "S"."TYPE#"<>10 AND
              "S"."TYPE#"<>1)


Statistics
----------------------------------------------------------
          0  recursive calls
          0  db block gets
        537  consistent gets
          0  physical reads
          0  redo size
       4629  bytes sent via SQL*Net to client
        557  bytes received via SQL*Net from client
          5  SQL*Net roundtrips to/from client
          0  sorts (memory)
          0  sorts (disk)
         49  rows processed

++关闭执行计划：
SQL> set autotrace off

++添加表描述：
SQL> comment on table student is '学生表';

Comment created.

++查看表描述：
SQL> select * from user_tab_comments where table_name = 'STUDENT';

TABLE_NAME           TABLE_TYPE                        COMMENTS
-------------------- --------------------------------- --------------------
STUDENT              TABLE                             学生表

++添加表列描述及其查看方法：
SQL> comment on column student.sname is '名字'; 

Comment created.

SQL> select * from user_col_comments where table_name = 'STUDENT';

TABLE_NAME           COLUMN_NAME          COMMENTS
-------------------- -------------------- --------------------
STUDENT              SNO
STUDENT              SNAME                名字
STUDENT              SAGE
STUDENT              SSEX


